{
  "TR Constant": {
    "prefix": "fm_const",
    "body": [
      "export const ${1:name} = 'app/${2:domain}/${1:name}';",
      "export const ${1:name}_SUCCESS = 'app/${2:domain}/${1:name}_SUCCESS';",
      "export const ${1:name}_FAILURE = 'app/${2:domain}/${1:name}_FAILURE';"
    ],
    "description": "Constant"
  },
  "TR Constants CRUD": {
    "prefix": "fm_const_crud",
    "body": [
      "export const FETCH_${1:UPPERCASE} = 'app/${2:domain}/FETCH_${1:UPPERCASE}';",
      "export const FETCH_${1:UPPERCASE}_SUCCESS = 'app/${2:domain}/FETCH_${1:UPPERCASE}_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}_FAILURE = 'app/${2:domain}/FETCH_${1:UPPERCASE}_FAILURE';",
      "export const FETCH_${1:UPPERCASE}S = 'app/${2:domain}/FETCH_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE}S_SUCCESS = 'app/${2:domain}/FETCH_${1:UPPERCASE}S_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}S_FAILURE = 'app/${2:domain}/FETCH_${1:UPPERCASE}S_FAILURE';",
      "export const CREATE_${1:UPPERCASE} = 'app/${2:domain}/CREATE_${1:UPPERCASE}';",
      "export const CREATE_${1:UPPERCASE}_SUCCESS = 'app/${2:domain}/CREATE_${1:UPPERCASE}_SUCCESS';",
      "export const CREATE_${1:UPPERCASE}_FAILURE = 'app/${2:domain}/CREATE_${1:UPPERCASE}_FAILURE';",
      "export const DELETE_${1:UPPERCASE} = 'app/${2:domain}/DELETE_${1:UPPERCASE}';",
      "export const DELETE_${1:UPPERCASE}_SUCCESS = 'app/${2:domain}/DELETE_${1:UPPERCASE}_SUCCESS';",
      "export const DELETE_${1:UPPERCASE}_FAILURE = 'app/${2:domain}/DELETE_${1:UPPERCASE}_FAILURE';",
      "export const UPDATE_${1:UPPERCASE} = 'app/${2:domain}/UPDATE_${1:UPPERCASE}';",
      "export const UPDATE_${1:UPPERCASE}_SUCCESS = 'app/${2:domain}/UPDATE_${1:UPPERCASE}_SUCCESS';",
      "export const UPDATE_${1:UPPERCASE}_FAILURE = 'app/${2:domain}/UPDATE_${1:UPPERCASE}_FAILURE';",
      ""
    ],
    "description": "Constants"
  },
  "Action": {
    "prefix": "fm_action",
    "body": [
      "import {",
      "  ${2:const},",
      "  ${2:const}_SUCCESS,",
      "  ${2:const}_FAILURE,",
      "} from './constants';",
      "",
      "export function ${1:action}() {",
      "  return {",
      "    type: ${2:const},",
      "  };",
      "}",
      "export function ${1:action}Success(${3:success}) {",
      "  return {",
      "    type: ${2:const}_SUCCESS,",
      "    ${3:success},",
      "  };",
      "}",
      "export function ${1:action}Failure(error) {",
      "  return {",
      "    type: ${2:const}_FAILURE,",
      "    error,",
      "  };",
      "}",
      ""
    ],
    "description": "Generates a single action"
  },
  "Actions": {
    "prefix": "fm_actions",
    "body": [
      "import {",
      "  FETCH_${1:ALLCAPS_SNAKE},",
      "  FETCH_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  FETCH_${1:ALLCAPS_SNAKE}_FAILURE,",
      "  FETCH_${1:ALLCAPS_SNAKE}S,",
      "  FETCH_${1:ALLCAPS_SNAKE}S_SUCCESS,",
      "  FETCH_${1:ALLCAPS_SNAKE}S_FAILURE,",
      "  CREATE_${1:ALLCAPS_SNAKE},",
      "  CREATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  CREATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "  UPDATE_${1:ALLCAPS_SNAKE},",
      "  UPDATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  UPDATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "  DELETE_${1:ALLCAPS_SNAKE},",
      "  DELETE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  DELETE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "} from './constants';",
      "",
      "export function fetch${2:PascalCase}(${3:lowercase}Id) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}s(options) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}S,",
      "    options",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sSuccess(${3:lowercase}s) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}S_SUCCESS,",
      "    ${3:lowercase}s,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sFailure(error) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}S_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function create${2:PascalCase}(${3:lowercase}) {",
      "  return {",
      "    type: CREATE_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function create${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: CREATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function create${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: CREATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function update${2:PascalCase}(${3:lowercase}) {",
      "  return {",
      "    type: UPDATE_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function update${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: UPDATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function update${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: UPDATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function delete${2:PascalCase}(${3:lowercase}Id) {",
      "  return {",
      "    type: DELETE_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase}Id,",
      "  };",
      "}",
      "export function delete${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: DELETE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function delete${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: DELETE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}"
    ],
    "description": "Generates all the actions for CRUD"
  },
  "Saga": {
    "prefix": "fm_saga",
    "body": [
      "import { all, call, put, takeLatest } from 'redux-saga/effects';",
      "import {",
      "  ${1:const},",
      "} from './constants';",
      "import { ${2:action} as ${2:action}Api } from '../../api/orders/api';",
      "import {",
      "  ${2:action}Success,",
      "  ${2:action}Failure,",
      "} from './actions';",
      "",
      "export function* ${2:action}Saga() {",
      "  yield takeLatest(${1:const}, perform${3:perform});",
      "}",
      "",
      "function* perform${3:perform}(action) {",
      "  try {",
      "    const response = yield call(${2:action}Api, action.cartId);",
      "    console.log('response', response);",
      "    if (response) {",
      "      yield put(${2:action}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(${2:action}Failure(e));",
      "  }",
      "}",
      ""
    ],
    "description": "Saga"
  },
  "Generates component": {
    "prefix": "fm_comp",
    "body": [
      "import React, { Component } from 'react';",
      "import PropTypes from 'prop-types';",
      "import {",
      "  withStyles,",
      "} from '@material-ui/core';",
      "",
      "const styles = () => ({",
      "});",
      "",
      "class ${1:component} extends Component { // eslint-disable-line react/prefer-stateless-function",
      "  render() {",
      "    const { classes } = this.props;",
      "    return (",
      "      <div></div>",
      "    );",
      "  }",
      "}",
      "${1:component}.defaultProps = {",
      "",
      "};",
      "${1:component}.propTypes = {",
      "  classes: PropTypes.object,",
      "};",
      "",
      "export default withStyles(styles)(${1:component});",
      ""
    ],
    "description": "Generates component"
  },
  "Generates Container": {
    "prefix": "fm_container",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { createStructuredSelector } from 'reselect';",
      "import { compose } from 'redux';",
      "",
      "import { select${3:fetch} } from './selectors';",
      "",
      "export class ${1:name} extends React.Component { // eslint-disable-line react/prefer-stateless-function",
      "  render() {",
      "    return (",
      "      <div>",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "${1:name}.propTypes = {",
      "  fetch${3:fetch}: PropTypes.func,",
      "};",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "  ${2:key}: select${3:fetch}(),",
      "});",
      "",
      "function mapDispatchToProps(dispatch) {",
      "  return {",
      "    fetch${3:fetch}: () => dispatch(fetch${3:fetch}()),",
      "  };",
      "}",
      "",
      "const withConnect = connect(mapStateToProps, mapDispatchToProps);",
      "",
      "export default compose(",
      "  withConnect,",
      ")(${1:name});",
      ""
    ],
    "description": "Generates Container"
  },
  "Generates Sagas for Crud ": {
    "prefix": "fm_saga_crud",
    "body": [
      "import { call, put, takeLatest } from 'redux-saga/effects';",
      "import {",
      "  FETCH_${1:ALLCAPS_SNAKE}S,",
      "  FETCH_${1:ALLCAPS_SNAKE},",
      "  CREATE_${1:ALLCAPS_SNAKE},",
      "  UPDATE_${1:ALLCAPS_SNAKE},",
      "  DELETE_${1:ALLCAPS_SNAKE},",
      "} from '../constants/${3:lowercase}s';",
      "import {",
      "  fetch${2:PascalCase}sSuccess,",
      "  fetch${2:PascalCase}sFailure,",
      "  fetch${2:PascalCase}Success,",
      "  fetch${2:PascalCase}Failure,",
      "  create${2:PascalCase}Success,",
      "  create${2:PascalCase}Failure,",
      "  update${2:PascalCase}Success,",
      "  update${2:PascalCase}Failure,",
      "  delete${2:PascalCase}Success,",
      "  delete${2:PascalCase}Failure,",
      "} from '../actions/${3:lowercase}s';",
      "import {",
      "  fetch${2:PascalCase}s as fetch${2:PascalCase}sApi,",
      "  fetch${2:PascalCase} as fetch${2:PascalCase}Api,",
      "  create${2:PascalCase} as create${2:PascalCase}Api,",
      "  update${2:PascalCase} as update${2:PascalCase}Api,",
      "  delete${2:PascalCase} as delete${2:PascalCase}Api,",
      "} from '../apis/${3:lowercase}s';",
      "",
      "export function* fetch${2:PascalCase}sSaga() {",
      "  yield takeLatest(FETCH_${1:ALLCAPS_SNAKE}S, performFetch${2:PascalCase}sAction);",
      "}",
      "",
      "function* performFetch${2:PascalCase}sAction(action) {",
      "  try {",
      "    const response = yield call(fetch${2:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(fetch${2:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${2:PascalCase}sFailure(e));",
      "  }",
      "}",
      "export function* fetch${2:PascalCase}Saga() {",
      "  yield takeLatest(FETCH_${1:ALLCAPS_SNAKE}, performFetch${2:PascalCase}Action);",
      "}",
      "function* performFetch${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(fetch${2:PascalCase}Api, action.${3:lowercase}Id);",
      "    if (response) {",
      "      yield put(fetch${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* create${2:PascalCase}Saga() {",
      "  yield takeLatest(CREATE_${1:ALLCAPS_SNAKE}, performCreate${2:PascalCase}Action);",
      "}",
      "function* performCreate${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(create${2:PascalCase}Api, action.${3:lowercase});",
      "    if (response) {",
      "      yield put(create${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(create${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* update${2:PascalCase}Saga() {",
      "  yield takeLatest(UPDATE_${1:ALLCAPS_SNAKE}, performUpdate${2:PascalCase}Action);",
      "}",
      "function* performUpdate${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(update${2:PascalCase}Api, action.${3:lowercase});",
      "    if (response) {",
      "      yield put(update${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(update${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* delete${2:PascalCase}Saga() {",
      "  yield takeLatest(DELETE_${1:ALLCAPS_SNAKE}, performDelete${2:PascalCase}Action);",
      "}",
      "function* performDelete${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(delete${2:PascalCase}Api, action.${3:lowercase}Id);",
      "    if (response) {",
      "      yield put(delete${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(delete${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export default function * defaultSaga() {",
      "  return yield all([",
      "    fetch${2:PascalCase}sSaga(),",
      "    fetch${2:PascalCase}Saga(),",
      "    create${2:PascalCase}Saga(),",
      "    update${2:PascalCase}Saga(),",
      "    delete${2:PascalCase}Saga(),",
      "  ]);",
      "}",
      ""
    ],
    "description": "Generates Saga's for CRUD operations"
  },
  "Generates APIs ": {
    "prefix": "fm_apis_crud",
    "body": [
      "import { buildUrl } from './utils';",
      "",
      "export function fetch${1:PascalCase}s() {",
      "  const url = buildUrl(`/${2:lowercase}s`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function fetch${1:PascalCase}(${2:lowercase}Id) {",
      "  const url = buildUrl(`/${2:lowercase}s/${${2:lowercase}Id}`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function create${1:PascalCase}(${2:lowercase}) {",
      "  const url = buildUrl('/${2:lowercase}');",
      "  return fetch(url, {",
      "    method: 'POST',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "    body: JSON.stringify(${2:lowercase})",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function update${1:PascalCase}(${2:lowercase}) {",
      "  const url = buildUrl(`/${2:lowercase}s/${${2:lowercase}.id}`);",
      "  return fetch(url, {",
      "    method: 'PUT',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "    body: JSON.stringify(${2:lowercase})",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function delete${1:PascalCase}(${2:lowercase}Id) {",
      "  const url = buildUrl(`/${2:lowercase}s/${${2:lowercase}Id}`);",
      "  return fetch(url, {",
      "    method: 'DELETE',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      ""
    ],
    "description": "Generates APIs "
  },
  "Generates Selectors": {
    "prefix": "fm_selectors_crud",
    "body": [
      "import { createSelector, createStructuredSelector } from 'reselect';",
      "",
      "/**",
      " * Direct selector to the ${2:camelCase}s state domain",
      " */",
      "export const select${1:PascalCase}sDomain = (state) => state.get('${2:camelCase}s');",
      "",
      "/**",
      " * Sub Domain Selectors",
      " */",
      "export const select${1:PascalCase}ListDomain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('${2:camelCase}List')",
      ");",
      "export const selectNew${1:PascalCase}Domain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('new${1:PascalCase}')",
      ");",
      "export const selectDeleted${1:PascalCase}Domain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('deleted${1:PascalCase}')",
      ");",
      "export const selectActive${1:PascalCase}Domain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('active${1:PascalCase}')",
      ");",
      ""
    ],
    "description": "Generates Selectors"
  },
  "Refinery HOC": {
    "prefix": "fm_hoc",
    "body": [
      "import React from 'react';",
      "import { createStructuredSelector } from 'reselect';",
      "import { connect } from 'react-redux';",
      "import { withRouter } from 'react-router-dom';",
      "import { compose } from 'redux';",
      "",
      "import {",
      "  select${1:Name}List,",
      "  selectActive${1:Name},",
      "} from '../selectors/${2:lowercase}';",
      "",
      "import {",
      "  fetch${1:Name}s,",
      "  fetch${1:Name},",
      "  create${1:Name},",
      "  update${1:Name},",
      "  delete${1:Name},",
      "} from '../actions/${2:lowercase}';",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "  ${2:lowercase}List: select${1:Name}List(),",
      "  ${2:lowercase}: selectActive${1:Name}(),",
      "});",
      "",
      "const mapDispatchToProps = dispatch => ({",
      "  fetch${1:Name}s: () => dispatch(fetch${1:Name}s()),",
      "  fetch${1:Name}: id => dispatch(fetch${1:Name}(id)),",
      "  create${1:Name}: (data) => dispatch(create${1:Name}(data)),",
      "  update${1:Name}: (data) => dispatch(update${1:Name}(data)),",
      "  delete${1:Name}: (id) => dispatch(delete${1:Name}(id)),",
      "});",
      "",
      "const withConnect = connect(mapStateToProps, mapDispatchToProps);",
      "const with${1:Name}s = Component => props => <Component {...props} />;",
      "",
      "const wrappedComponent = compose(",
      "  withConnect,",
      "  withRouter,",
      "  with${1:Name}s,",
      ");",
      "",
      "export default wrappedComponent;",
      ""
    ],
    "description": "Refinery HOC"
  }
}