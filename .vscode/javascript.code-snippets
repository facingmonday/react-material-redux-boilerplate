{
	"Constant": {
	  "prefix": "mc_constant",
	  "body": [
      "export const FETCH_${1:UPPERCASE}S = 'FETCH_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE}S_LOADING = 'FETCH_${1:UPPERCASE}S_LOADING';",
      "export const FETCH_${1:UPPERCASE}S_SUCCESS = 'FETCH_${1:UPPERCASE}S_SUCCESS';",
	  ],
	  "description": "Constant"
	},
	"Constants CRUD": {
    "prefix": "mc_constants_crud",
    "body": [
      "export const FETCH_${1:UPPERCASE}S = 'FETCH_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE}S_LOADING = 'FETCH_${1:UPPERCASE}S_LOADING';",
      "export const FETCH_${1:UPPERCASE}S_SUCCESS = 'FETCH_${1:UPPERCASE}S_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}S_FAILURE = 'FETCH_${1:UPPERCASE}S_FAILURE';",
      "export const RESET_${1:UPPERCASE}S = 'RESET_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE} = 'FETCH_${1:UPPERCASE}';",
      "export const FETCH_${1:UPPERCASE}_LOADING = 'FETCH_${1:UPPERCASE}_LOADING';",
      "export const FETCH_${1:UPPERCASE}_SUCCESS = 'FETCH_${1:UPPERCASE}_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}_FAILURE = 'FETCH_${1:UPPERCASE}_FAILURE';",
      "export const SAVE_${1:UPPERCASE} = 'SAVE_${1:UPPERCASE}';",
      "export const SAVE_${1:UPPERCASE}_SUCCESS = 'SAVE_${1:UPPERCASE}_SUCCESS';",
      "export const SAVE_${1:UPPERCASE}_FAILURE = 'SAVE_${1:UPPERCASE}_FAILURE';",
      "export const UPDATE_ACTIVE_${1:UPPERCASE} = 'UPDATE_ACTIVE_${1:UPPERCASE}';",
      "export const RESET_ACTIVE_${1:UPPERCASE} = 'RESET_ACTIVE_${1:UPPERCASE}';",
      "export const DELETE_${1:UPPERCASE} = 'DELETE_${1:UPPERCASE}';",
      "export const DELETE_${1:UPPERCASE}_SUCCESS = 'DELETE_${1:UPPERCASE}_SUCCESS';",
      "export const DELETE_${1:UPPERCASE}_FAILURE = 'DELETE_${1:UPPERCASE}_FAILURE';",
      "export const RESET_DELETED_${1:UPPERCASE} = 'RESET_DELETED_${1:UPPERCASE}';",
      ""
    ],
    "description": "Constants CRUD"
  },
	"Action": {
    "prefix": "mc_action",
    "body": [
      "import {",
      "  FETCH_${1:UPPERCASE},",
      "  FETCH_${1:UPPERCASE}_SUCCESS,",
      "  FETCH_${1:UPPERCASE}_FAILURE,",
      "} from '../constants/${3:camelCase}';",
      "",
      "export function fetch${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      ""
    ],
    "description": "Action"
  },
	"Action CRUD": {
    "prefix": "mc_action_crud",
    "body": [
      "import {",
      "  FETCH_${1:UPPERCASE},",
      "  FETCH_${1:UPPERCASE}_SUCCESS,",
      "  FETCH_${1:UPPERCASE}_FAILURE,",
      "  FETCH_${1:UPPERCASE}S,",
      "  FETCH_${1:UPPERCASE}S_SUCCESS,",
      "  FETCH_${1:UPPERCASE}S_FAILURE,",
      "  SAVE_${1:UPPERCASE},",
      "  SAVE_${1:UPPERCASE}_SUCCESS,",
      "  SAVE_${1:UPPERCASE}_FAILURE,",
      "  UPDATE_ACTIVE_${1:UPPERCASE},",
      "  RESET_ACTIVE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE}_SUCCESS,",
      "  DELETE_${1:UPPERCASE}_FAILURE,",
      "} from '../constants/${3:camelCase}';",
      "",
      "export function fetch${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}s(options) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S,",
      "    options,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sSuccess(response) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S_SUCCESS,",
      "    stats: response.stats,",
      "    results: response.results,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sFailure(error) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function save${2:PascalCase}(${3:camelCase}) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE},",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function save${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function save${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function updateActive${2:PascalCase}(${3:camelCase}) {",
      "  return {",
      "    type: UPDATE_ACTIVE_${1:UPPERCASE},",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function resetActive${2:PascalCase}(data) {",
      "  return {",
      "    type: RESET_ACTIVE_${1:UPPERCASE},",
      "    data,",
      "  };",
      "}",
      "export function delete${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function delete${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function delete${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      ""
    ],
    "description": "Action CRUD"
  },
	"Saga CRUD": {
    "prefix": "mc_saga_crud",
    "body": [
      "import { all, call, put, takeLatest } from 'redux-saga/effects';",
      "import { FETCH_${1:UPPERCASE}S, FETCH_${1:UPPERCASE}, SAVE_${1:UPPERCASE}, DELETE_${1:UPPERCASE} } from '../constants/${2:camelCase}';",
      "import {",
      "  fetch${3:PascalCase}sSuccess,",
      "  fetch${3:PascalCase}sFailure,",
      "  fetch${3:PascalCase}Success,",
      "  fetch${3:PascalCase}Failure,",
      "  save${3:PascalCase}Success,",
      "  save${3:PascalCase}Failure,",
      "  delete${3:PascalCase}Success,",
      "  delete${3:PascalCase}Failure,",
      "} from '../actions/${2:camelCase}';",
      "import {",
      "  fetch${3:PascalCase}s as fetch${3:PascalCase}sApi,",
      "  fetch${3:PascalCase} as fetch${3:PascalCase}Api,",
      "  create${3:PascalCase} as create${3:PascalCase}Api,",
      "  update${3:PascalCase} as update${3:PascalCase}Api,",
      "  delete${3:PascalCase} as delete${3:PascalCase}Api,",
      "} from '../apis/${2:camelCase}';",
      "",
      "export function* fetch${3:PascalCase}sSaga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}S, performFetch${3:PascalCase}sAction);",
      "}",
      "",
      "function* performFetch${3:PascalCase}sAction(action) {",
      "  try {",
      "    const response = yield call(fetch${3:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}sFailure(e));",
      "  }",
      "}",
      "export function* fetch${3:PascalCase}Saga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}, performFetch${3:PascalCase}Action);",
      "}",
      "function* performFetch${3:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(fetch${3:PascalCase}Api, action.${2:camelCase}Id);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "",
      "export function* save${3:PascalCase}Saga() {",
      "  yield takeLatest(SAVE_${1:UPPERCASE}, performSave${3:PascalCase}Action);",
      "}",
      "function* performSave${3:PascalCase}Action(action) {",
      "  try {",
      "    const response = action.${2:camelCase}.id ? yield call(update${3:PascalCase}Api, action.${2:camelCase}) : yield call(create${3:PascalCase}Api, action.${2:camelCase});",
      "    if (response) {",
      "      yield put(save${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(save${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* delete${3:PascalCase}Saga() {",
      "  yield takeLatest(DELETE_${1:UPPERCASE}, performDelete${3:PascalCase}Action);",
      "}",
      "function* performDelete${3:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(delete${3:PascalCase}Api, action.${2:camelCase}Id);",
      "    if (response) {",
      "      yield put(delete${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(delete${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "",
      "export default function* defaultSaga() {",
      "  return yield all([fetch${3:PascalCase}sSaga(), fetch${3:PascalCase}Saga(), save${3:PascalCase}Saga(), delete${3:PascalCase}Saga()]);",
      "}",
      ""
    ],
    "description": "Saga CRUD"
  },
  "Saga": {
    "prefix": "mc_saga",
    "body": [
      "export function* fetch${3:PascalCase}sSaga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}S, performFetch${3:PascalCase}sAction);",
      "}",
      "",
      "function* performFetch${3:PascalCase}sAction(action) {",
      "  try {",
      "    const response = yield call(fetch${3:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}sFailure(e));",
      "  }",
      "}"
    ],
    "description": "Saga"
  },
	"Component": {
	  "prefix": "mc_comp",
	  "body": [
		"import React, { Component } from 'react';",
		"import PropTypes from 'prop-types';",
		"import {",
		"  withStyles,",
		"} from '@material-ui/core';",
		"",
		"const styles = () => ({",
		"});",
		"",
		"class ${1:component} extends Component { // eslint-disable-line react/prefer-stateless-function",
		"  render() {",
		"    const { classes } = this.props;",
		"    return (",
		"      <div></div>",
		"    );",
		"  }",
		"}",
		"${1:component}.defaultProps = {",
		"",
		"};",
		"${1:component}.propTypes = {",
		"  classes: PropTypes.object,",
		"};",
		"",
		"export default withStyles(styles)(${1:component});",
		""
	  ],
	  "description": "Generates Component"
	},
	"Container": {
	  "prefix": "fm_container",
	  "body": [
		"import React from 'react';",
		"import PropTypes from 'prop-types';",
		"import { connect } from 'react-redux';",
		"import { createStructuredSelector } from 'reselect';",
		"import { compose } from 'redux';",
		"",
		"import { select${3:fetch} } from './selectors';",
		"",
		"export class ${1:name} extends React.Component { // eslint-disable-line react/prefer-stateless-function",
		"  render() {",
		"    return (",
		"      <div>",
		"      </div>",
		"    );",
		"  }",
		"}",
		"",
		"${1:name}.propTypes = {",
		"  fetch${3:fetch}: PropTypes.func,",
		"};",
		"",
		"const mapStateToProps = createStructuredSelector({",
		"  ${2:key}: select${3:fetch}(),",
		"});",
		"",
		"function mapDispatchToProps(dispatch) {",
		"  return {",
		"    fetch${3:fetch}: () => dispatch(fetch${3:fetch}()),",
		"  };",
		"}",
		"",
		"const withConnect = connect(mapStateToProps, mapDispatchToProps);",
		"",
		"export default compose(",
		"  withConnect,",
		")(${1:name});",
		""
	  ],
	  "description": "Generates Container"
	},
	"API CRUD": {
    "prefix": "mc_api_crud",
    "body": [
      "import { COOKIE_NAME } from '../../config/constants';",
      "import { buildUrl, getCookie } from '../utils';",
      "",
      "export function fetch${1:PascalCase}s() {",
      "  const url = buildUrl(`/api/${2:camelCase}s`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    const e = new Error();",
      "    e.code = response.status;",
      "    throw e;",
      "  });",
      "}",
      "export function fetch${1:PascalCase}(${2:camelCase}Id) {",
      "  const url = buildUrl(`/api/${2:camelCase}s/${${2:camelCase}Id}`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      "export function create${1:PascalCase}(${2:camelCase}) {",
      "  const url = buildUrl('/api/${2:camelCase}s');",
      "  return fetch(url, {",
      "    method: 'POST',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    body: JSON.stringify(${2:camelCase}),",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      "export function update${1:PascalCase}(${2:camelCase}) {",
      "  const url = buildUrl(`/api/${2:camelCase}s/${${2:camelCase}.id}`);",
      "  return fetch(url, {",
      "    method: 'PUT',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    body: JSON.stringify(${2:camelCase}),",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      "export function delete${1:PascalCase}(${2:camelCase}Id) {",
      "  const url = buildUrl(`/api/${2:camelCase}s/${${2:camelCase}Id}`);",
      "  return fetch(url, {",
      "    method: 'DELETE',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      ""
    ],
    "description": "API CRUD"
  },
  "API Route": {
    "prefix": "mc_api_route",
    "body": [
      "export function fetch${1:PascalCase}s() {",
      "  const url = buildUrl(`/api/${2:camelCase}s`);",
      "  return fetch(url, {",
      "    method: '${3:method}',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    const e = new Error();",
      "    e.code = response.status;",
      "    throw e;",
      "  });",
      "}"
    ],
    "description": "API Route"
  },
	"Selectors": {
	  "prefix": "mc_selectors_crud",
	  "body": [
		"import { createSelector, createStructuredSelector } from 'reselect';",
		"",
		"/**",
		" * Direct selector to the ${2:camelCase}s state domain",
		" */",
		"export const select${1:PascalCase}sDomain = (state) => state.get('${2:camelCase}s');",
		"",
		"/**",
		" * Sub Domain Selectors",
		" */",
		"export const select${1:PascalCase}ListDomain = createSelector(",
		"  select${1:PascalCase}sDomain,",
		"  (${2:camelCase}s) => ${2:camelCase}s.get('${2:camelCase}List')",
		");",
		"export const selectNew${1:PascalCase}Domain = createSelector(",
		"  select${1:PascalCase}sDomain,",
		"  (${2:camelCase}s) => ${2:camelCase}s.get('new${1:PascalCase}')",
		");",
		"export const selectDeleted${1:PascalCase}Domain = createSelector(",
		"  select${1:PascalCase}sDomain,",
		"  (${2:camelCase}s) => ${2:camelCase}s.get('deleted${1:PascalCase}')",
		");",
		"export const selectActive${1:PascalCase}Domain = createSelector(",
		"  select${1:PascalCase}sDomain,",
		"  (${2:camelCase}s) => ${2:camelCase}s.get('active${1:PascalCase}')",
		");",
		""
	  ],
	  "description": "Generates Selectors"
	},
	"HOC": {
	  "prefix": "mc_hoc",
	  "body": [
		"import React from 'react';",
		"import { createStructuredSelector } from 'reselect';",
		"import { connect } from 'react-redux';",
		"import { withRouter } from 'react-router-dom';",
		"import { compose } from 'redux';",
		"",
		"import {",
		"  select${1:Name}List,",
		"  selectActive${1:Name},",
		"} from '../selectors/${2:lowercase}';",
		"",
		"import {",
		"  fetch${1:Name}s,",
		"  fetch${1:Name},",
		"  create${1:Name},",
		"  update${1:Name},",
		"  delete${1:Name},",
		"} from '../actions/${2:lowercase}';",
		"",
		"const mapStateToProps = createStructuredSelector({",
		"  ${2:lowercase}List: select${1:Name}List(),",
		"  ${2:lowercase}: selectActive${1:Name}(),",
		"});",
		"",
		"const mapDispatchToProps = dispatch => ({",
		"  fetch${1:Name}s: () => dispatch(fetch${1:Name}s()),",
		"  fetch${1:Name}: id => dispatch(fetch${1:Name}(id)),",
		"  create${1:Name}: (data) => dispatch(create${1:Name}(data)),",
		"  update${1:Name}: (data) => dispatch(update${1:Name}(data)),",
		"  delete${1:Name}: (id) => dispatch(delete${1:Name}(id)),",
		"});",
		"",
		"const withConnect = connect(mapStateToProps, mapDispatchToProps);",
		"const with${1:Name}s = Component => props => <Component {...props} />;",
		"",
		"const wrappedComponent = compose(",
		"  withConnect,",
		"  withRouter,",
		"  with${1:Name}s,",
		");",
		"",
		"export default wrappedComponent;",
		""
	  ],
	  "description": "HOC"
	}
}
